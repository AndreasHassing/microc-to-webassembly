// Implementation file for parser generated by fsyacc
module CPar
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "..\..\CPar.fsy"

(*	File MicroC/CPar.fsy
	Parser specification for micro-C, a small imperative language
	sestoft@itu.dk * 2009-09-29
	No (real) shift/reduce conflicts thanks to Niels Kokholm.
*)

open MicroWac.Absyn

let compose1 f (g, s) = ((fun x -> g(f(x))), s)
let nl = CstI 10

let exportFundec = function
  | Fundec(_, typ, name, pardecs, block) -> Fundec(true, typ, name, pardecs, block)
  | td -> failwith (sprintf "can only export function declarations, not %A" td)

let importFunsig = function
  | Funsig(_, typ, name, pardecs) -> Funsig(true, typ, name, pardecs)
  | td -> failwith (sprintf "can only import function signatures, not %A" td)

# 27 "..\..\CPar.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | LPAR
  | RPAR
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | SEMI
  | COMMA
  | ASSIGN
  | AMP
  | NOT
  | SEQOR
  | SEQAND
  | EQ
  | NE
  | GT
  | LT
  | GE
  | LE
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | MOD
  | EXPORT
  | IMPORT
  | CHAR
  | ELSE
  | IF
  | INT
  | NULL
  | RETURN
  | VOID
  | WHILE
  | CSTSTRING of (string)
  | NAME of (string)
  | CSTINT of (int)
  | CSTBOOL of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_SEMI
    | TOKEN_COMMA
    | TOKEN_ASSIGN
    | TOKEN_AMP
    | TOKEN_NOT
    | TOKEN_SEQOR
    | TOKEN_SEQAND
    | TOKEN_EQ
    | TOKEN_NE
    | TOKEN_GT
    | TOKEN_LT
    | TOKEN_GE
    | TOKEN_LE
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_MOD
    | TOKEN_EXPORT
    | TOKEN_IMPORT
    | TOKEN_CHAR
    | TOKEN_ELSE
    | TOKEN_IF
    | TOKEN_INT
    | TOKEN_NULL
    | TOKEN_RETURN
    | TOKEN_VOID
    | TOKEN_WHILE
    | TOKEN_CSTSTRING
    | TOKEN_NAME
    | TOKEN_CSTINT
    | TOKEN_CSTBOOL
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_Topdecs
    | NONTERM_Topdec
    | NONTERM_Vardec
    | NONTERM_Vardesc
    | NONTERM_ImportedFunsig
    | NONTERM_ExportedFundec
    | NONTERM_Funsig
    | NONTERM_Fundec
    | NONTERM_Paramdecs
    | NONTERM_Paramdecs1
    | NONTERM_Block
    | NONTERM_StmtOrDecSeq
    | NONTERM_Stmt
    | NONTERM_StmtM
    | NONTERM_StmtU
    | NONTERM_Expr
    | NONTERM_ExprNotAccess
    | NONTERM_AtExprNotAccess
    | NONTERM_Access
    | NONTERM_Exprs
    | NONTERM_Exprs1
    | NONTERM_Const
    | NONTERM_Type

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | LPAR  -> 1 
  | RPAR  -> 2 
  | LBRACE  -> 3 
  | RBRACE  -> 4 
  | LBRACK  -> 5 
  | RBRACK  -> 6 
  | SEMI  -> 7 
  | COMMA  -> 8 
  | ASSIGN  -> 9 
  | AMP  -> 10 
  | NOT  -> 11 
  | SEQOR  -> 12 
  | SEQAND  -> 13 
  | EQ  -> 14 
  | NE  -> 15 
  | GT  -> 16 
  | LT  -> 17 
  | GE  -> 18 
  | LE  -> 19 
  | PLUS  -> 20 
  | MINUS  -> 21 
  | TIMES  -> 22 
  | DIV  -> 23 
  | MOD  -> 24 
  | EXPORT  -> 25 
  | IMPORT  -> 26 
  | CHAR  -> 27 
  | ELSE  -> 28 
  | IF  -> 29 
  | INT  -> 30 
  | NULL  -> 31 
  | RETURN  -> 32 
  | VOID  -> 33 
  | WHILE  -> 34 
  | CSTSTRING _ -> 35 
  | NAME _ -> 36 
  | CSTINT _ -> 37 
  | CSTBOOL _ -> 38 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_LPAR 
  | 2 -> TOKEN_RPAR 
  | 3 -> TOKEN_LBRACE 
  | 4 -> TOKEN_RBRACE 
  | 5 -> TOKEN_LBRACK 
  | 6 -> TOKEN_RBRACK 
  | 7 -> TOKEN_SEMI 
  | 8 -> TOKEN_COMMA 
  | 9 -> TOKEN_ASSIGN 
  | 10 -> TOKEN_AMP 
  | 11 -> TOKEN_NOT 
  | 12 -> TOKEN_SEQOR 
  | 13 -> TOKEN_SEQAND 
  | 14 -> TOKEN_EQ 
  | 15 -> TOKEN_NE 
  | 16 -> TOKEN_GT 
  | 17 -> TOKEN_LT 
  | 18 -> TOKEN_GE 
  | 19 -> TOKEN_LE 
  | 20 -> TOKEN_PLUS 
  | 21 -> TOKEN_MINUS 
  | 22 -> TOKEN_TIMES 
  | 23 -> TOKEN_DIV 
  | 24 -> TOKEN_MOD 
  | 25 -> TOKEN_EXPORT 
  | 26 -> TOKEN_IMPORT 
  | 27 -> TOKEN_CHAR 
  | 28 -> TOKEN_ELSE 
  | 29 -> TOKEN_IF 
  | 30 -> TOKEN_INT 
  | 31 -> TOKEN_NULL 
  | 32 -> TOKEN_RETURN 
  | 33 -> TOKEN_VOID 
  | 34 -> TOKEN_WHILE 
  | 35 -> TOKEN_CSTSTRING 
  | 36 -> TOKEN_NAME 
  | 37 -> TOKEN_CSTINT 
  | 38 -> TOKEN_CSTBOOL 
  | 41 -> TOKEN_end_of_input
  | 39 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startMain 
    | 1 -> NONTERM_Main 
    | 2 -> NONTERM_Topdecs 
    | 3 -> NONTERM_Topdecs 
    | 4 -> NONTERM_Topdec 
    | 5 -> NONTERM_Topdec 
    | 6 -> NONTERM_Topdec 
    | 7 -> NONTERM_Topdec 
    | 8 -> NONTERM_Vardec 
    | 9 -> NONTERM_Vardesc 
    | 10 -> NONTERM_Vardesc 
    | 11 -> NONTERM_Vardesc 
    | 12 -> NONTERM_Vardesc 
    | 13 -> NONTERM_Vardesc 
    | 14 -> NONTERM_ImportedFunsig 
    | 15 -> NONTERM_ExportedFundec 
    | 16 -> NONTERM_Funsig 
    | 17 -> NONTERM_Funsig 
    | 18 -> NONTERM_Fundec 
    | 19 -> NONTERM_Fundec 
    | 20 -> NONTERM_Paramdecs 
    | 21 -> NONTERM_Paramdecs 
    | 22 -> NONTERM_Paramdecs1 
    | 23 -> NONTERM_Paramdecs1 
    | 24 -> NONTERM_Block 
    | 25 -> NONTERM_StmtOrDecSeq 
    | 26 -> NONTERM_StmtOrDecSeq 
    | 27 -> NONTERM_StmtOrDecSeq 
    | 28 -> NONTERM_Stmt 
    | 29 -> NONTERM_Stmt 
    | 30 -> NONTERM_StmtM 
    | 31 -> NONTERM_StmtM 
    | 32 -> NONTERM_StmtM 
    | 33 -> NONTERM_StmtM 
    | 34 -> NONTERM_StmtM 
    | 35 -> NONTERM_StmtM 
    | 36 -> NONTERM_StmtU 
    | 37 -> NONTERM_StmtU 
    | 38 -> NONTERM_StmtU 
    | 39 -> NONTERM_Expr 
    | 40 -> NONTERM_Expr 
    | 41 -> NONTERM_ExprNotAccess 
    | 42 -> NONTERM_ExprNotAccess 
    | 43 -> NONTERM_ExprNotAccess 
    | 44 -> NONTERM_ExprNotAccess 
    | 45 -> NONTERM_ExprNotAccess 
    | 46 -> NONTERM_ExprNotAccess 
    | 47 -> NONTERM_ExprNotAccess 
    | 48 -> NONTERM_ExprNotAccess 
    | 49 -> NONTERM_ExprNotAccess 
    | 50 -> NONTERM_ExprNotAccess 
    | 51 -> NONTERM_ExprNotAccess 
    | 52 -> NONTERM_ExprNotAccess 
    | 53 -> NONTERM_ExprNotAccess 
    | 54 -> NONTERM_ExprNotAccess 
    | 55 -> NONTERM_ExprNotAccess 
    | 56 -> NONTERM_ExprNotAccess 
    | 57 -> NONTERM_ExprNotAccess 
    | 58 -> NONTERM_AtExprNotAccess 
    | 59 -> NONTERM_AtExprNotAccess 
    | 60 -> NONTERM_AtExprNotAccess 
    | 61 -> NONTERM_Access 
    | 62 -> NONTERM_Access 
    | 63 -> NONTERM_Access 
    | 64 -> NONTERM_Access 
    | 65 -> NONTERM_Access 
    | 66 -> NONTERM_Exprs 
    | 67 -> NONTERM_Exprs 
    | 68 -> NONTERM_Exprs1 
    | 69 -> NONTERM_Exprs1 
    | 70 -> NONTERM_Const 
    | 71 -> NONTERM_Const 
    | 72 -> NONTERM_Const 
    | 73 -> NONTERM_Const 
    | 74 -> NONTERM_Type 
    | 75 -> NONTERM_Type 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 41 
let _fsyacc_tagOfErrorTerminal = 39

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | LBRACE  -> "LBRACE" 
  | RBRACE  -> "RBRACE" 
  | LBRACK  -> "LBRACK" 
  | RBRACK  -> "RBRACK" 
  | SEMI  -> "SEMI" 
  | COMMA  -> "COMMA" 
  | ASSIGN  -> "ASSIGN" 
  | AMP  -> "AMP" 
  | NOT  -> "NOT" 
  | SEQOR  -> "SEQOR" 
  | SEQAND  -> "SEQAND" 
  | EQ  -> "EQ" 
  | NE  -> "NE" 
  | GT  -> "GT" 
  | LT  -> "LT" 
  | GE  -> "GE" 
  | LE  -> "LE" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | MOD  -> "MOD" 
  | EXPORT  -> "EXPORT" 
  | IMPORT  -> "IMPORT" 
  | CHAR  -> "CHAR" 
  | ELSE  -> "ELSE" 
  | IF  -> "IF" 
  | INT  -> "INT" 
  | NULL  -> "NULL" 
  | RETURN  -> "RETURN" 
  | VOID  -> "VOID" 
  | WHILE  -> "WHILE" 
  | CSTSTRING _ -> "CSTSTRING" 
  | NAME _ -> "NAME" 
  | CSTINT _ -> "CSTINT" 
  | CSTBOOL _ -> "CSTBOOL" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | LBRACK  -> (null : System.Object) 
  | RBRACK  -> (null : System.Object) 
  | SEMI  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | AMP  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | SEQOR  -> (null : System.Object) 
  | SEQAND  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NE  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | MOD  -> (null : System.Object) 
  | EXPORT  -> (null : System.Object) 
  | IMPORT  -> (null : System.Object) 
  | CHAR  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | INT  -> (null : System.Object) 
  | NULL  -> (null : System.Object) 
  | RETURN  -> (null : System.Object) 
  | VOID  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | CSTSTRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTINT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTBOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 2us; 65535us; 0us; 2us; 4us; 5us; 2us; 65535us; 0us; 4us; 4us; 4us; 10us; 65535us; 0us; 6us; 4us; 6us; 31us; 54us; 37us; 54us; 43us; 54us; 49us; 54us; 55us; 54us; 57us; 62us; 60us; 62us; 63us; 62us; 4us; 65535us; 11us; 13us; 12us; 13us; 16us; 17us; 18us; 19us; 2us; 65535us; 0us; 8us; 4us; 8us; 2us; 65535us; 0us; 9us; 4us; 9us; 1us; 65535us; 25us; 26us; 3us; 65535us; 0us; 10us; 4us; 10us; 27us; 28us; 4us; 65535us; 31us; 32us; 37us; 38us; 43us; 44us; 49us; 50us; 5us; 65535us; 31us; 53us; 37us; 53us; 43us; 53us; 49us; 53us; 55us; 56us; 8us; 65535us; 45us; 46us; 51us; 52us; 57us; 74us; 60us; 74us; 63us; 74us; 78us; 74us; 79us; 74us; 84us; 74us; 3us; 65535us; 57us; 58us; 60us; 61us; 63us; 64us; 4us; 65535us; 57us; 60us; 60us; 60us; 63us; 60us; 78us; 87us; 6us; 65535us; 57us; 65us; 60us; 65us; 63us; 65us; 78us; 66us; 79us; 80us; 84us; 85us; 6us; 65535us; 57us; 67us; 60us; 67us; 63us; 67us; 78us; 67us; 79us; 86us; 84us; 88us; 28us; 65535us; 57us; 68us; 60us; 68us; 63us; 68us; 70us; 72us; 76us; 77us; 78us; 68us; 79us; 68us; 82us; 83us; 84us; 68us; 94us; 95us; 97us; 117us; 100us; 101us; 118us; 102us; 119us; 103us; 120us; 104us; 121us; 105us; 122us; 106us; 123us; 107us; 124us; 108us; 125us; 109us; 126us; 110us; 127us; 111us; 128us; 112us; 129us; 113us; 130us; 115us; 132us; 114us; 143us; 116us; 146us; 117us; 28us; 65535us; 57us; 91us; 60us; 91us; 63us; 91us; 70us; 91us; 76us; 91us; 78us; 91us; 79us; 91us; 82us; 91us; 84us; 91us; 94us; 91us; 97us; 91us; 100us; 91us; 118us; 91us; 119us; 91us; 120us; 91us; 121us; 91us; 122us; 91us; 123us; 91us; 124us; 91us; 125us; 91us; 126us; 91us; 127us; 91us; 128us; 91us; 129us; 91us; 130us; 91us; 132us; 92us; 143us; 91us; 146us; 91us; 29us; 65535us; 57us; 93us; 60us; 93us; 63us; 93us; 70us; 93us; 76us; 93us; 78us; 93us; 79us; 93us; 82us; 93us; 84us; 93us; 94us; 93us; 97us; 93us; 100us; 93us; 118us; 93us; 119us; 93us; 120us; 93us; 121us; 93us; 122us; 93us; 123us; 93us; 124us; 93us; 125us; 93us; 126us; 93us; 127us; 93us; 128us; 93us; 129us; 93us; 130us; 93us; 132us; 93us; 140us; 142us; 143us; 93us; 146us; 93us; 31us; 65535us; 57us; 90us; 60us; 90us; 63us; 90us; 70us; 90us; 76us; 90us; 78us; 90us; 79us; 90us; 82us; 90us; 84us; 90us; 94us; 90us; 97us; 90us; 100us; 90us; 118us; 90us; 119us; 90us; 120us; 90us; 121us; 90us; 122us; 90us; 123us; 90us; 124us; 90us; 125us; 90us; 126us; 90us; 127us; 90us; 128us; 90us; 129us; 90us; 130us; 90us; 132us; 89us; 134us; 135us; 137us; 138us; 140us; 141us; 143us; 90us; 146us; 90us; 1us; 65535us; 97us; 98us; 2us; 65535us; 97us; 145us; 146us; 147us; 29us; 65535us; 57us; 131us; 60us; 131us; 63us; 131us; 70us; 131us; 76us; 131us; 78us; 131us; 79us; 131us; 82us; 131us; 84us; 131us; 94us; 131us; 97us; 131us; 100us; 131us; 118us; 131us; 119us; 131us; 120us; 131us; 121us; 131us; 122us; 131us; 123us; 131us; 124us; 131us; 125us; 131us; 126us; 131us; 127us; 131us; 128us; 131us; 129us; 131us; 130us; 131us; 132us; 131us; 140us; 131us; 143us; 131us; 146us; 131us; 12us; 65535us; 0us; 12us; 4us; 12us; 25us; 35us; 27us; 47us; 31us; 11us; 37us; 11us; 43us; 11us; 49us; 11us; 55us; 11us; 57us; 11us; 60us; 11us; 63us; 11us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 6us; 9us; 20us; 25us; 28us; 31us; 33us; 37us; 42us; 48us; 57us; 61us; 66us; 73us; 80us; 109us; 138us; 168us; 200us; 202us; 205us; 235us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 3us; 1us; 3us; 1us; 4us; 1us; 4us; 1us; 5us; 1us; 6us; 1us; 7us; 1us; 8us; 2us; 8us; 19us; 3us; 8us; 12us; 13us; 1us; 9us; 2us; 9us; 19us; 1us; 10us; 3us; 10us; 12us; 13us; 1us; 11us; 3us; 11us; 12us; 13us; 1us; 11us; 2us; 12us; 13us; 1us; 12us; 1us; 13us; 1us; 13us; 1us; 14us; 1us; 14us; 1us; 15us; 1us; 15us; 1us; 16us; 1us; 16us; 1us; 16us; 1us; 16us; 1us; 16us; 1us; 16us; 1us; 17us; 1us; 17us; 1us; 17us; 1us; 17us; 1us; 17us; 1us; 17us; 1us; 18us; 1us; 18us; 1us; 18us; 1us; 18us; 1us; 18us; 1us; 18us; 1us; 19us; 1us; 19us; 1us; 19us; 1us; 19us; 1us; 19us; 1us; 19us; 1us; 21us; 2us; 22us; 23us; 1us; 23us; 1us; 23us; 1us; 24us; 1us; 24us; 1us; 24us; 1us; 26us; 1us; 26us; 1us; 27us; 1us; 27us; 1us; 27us; 1us; 28us; 3us; 28us; 34us; 36us; 1us; 29us; 14us; 30us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 1us; 30us; 2us; 31us; 32us; 1us; 31us; 14us; 32us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 1us; 32us; 1us; 33us; 3us; 34us; 36us; 37us; 3us; 34us; 36us; 37us; 16us; 34us; 36us; 37us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 3us; 34us; 36us; 37us; 2us; 34us; 36us; 1us; 34us; 2us; 35us; 38us; 2us; 35us; 38us; 15us; 35us; 38us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 2us; 35us; 38us; 1us; 35us; 1us; 36us; 1us; 37us; 1us; 38us; 4us; 39us; 42us; 62us; 65us; 3us; 39us; 42us; 65us; 1us; 40us; 2us; 40us; 59us; 1us; 41us; 1us; 42us; 14us; 42us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 2us; 43us; 61us; 1us; 43us; 1us; 43us; 1us; 43us; 1us; 44us; 14us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 14us; 45us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 14us; 45us; 46us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 14us; 45us; 46us; 47us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 14us; 45us; 46us; 47us; 48us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 14us; 45us; 46us; 47us; 48us; 49us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 14us; 45us; 46us; 47us; 48us; 49us; 50us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 14us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 14us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 52us; 53us; 54us; 55us; 56us; 57us; 14us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 53us; 54us; 55us; 56us; 57us; 14us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 54us; 55us; 56us; 57us; 14us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 55us; 56us; 57us; 14us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 56us; 57us; 13us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 14us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 57us; 14us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 65us; 15us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 56us; 57us; 68us; 69us; 1us; 45us; 1us; 46us; 1us; 47us; 1us; 48us; 1us; 49us; 1us; 50us; 1us; 51us; 1us; 52us; 1us; 53us; 1us; 54us; 1us; 55us; 1us; 56us; 1us; 57us; 1us; 58us; 2us; 59us; 62us; 1us; 59us; 1us; 60us; 2us; 60us; 65us; 1us; 61us; 1us; 62us; 2us; 62us; 65us; 1us; 62us; 2us; 63us; 64us; 2us; 63us; 65us; 1us; 64us; 1us; 65us; 1us; 65us; 1us; 67us; 1us; 69us; 1us; 69us; 1us; 70us; 1us; 71us; 1us; 72us; 1us; 72us; 1us; 73us; 1us; 74us; 1us; 75us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 16us; 18us; 20us; 22us; 24us; 27us; 31us; 33us; 36us; 38us; 42us; 44us; 48us; 50us; 53us; 55us; 57us; 59us; 61us; 63us; 65us; 67us; 69us; 71us; 73us; 75us; 77us; 79us; 81us; 83us; 85us; 87us; 89us; 91us; 93us; 95us; 97us; 99us; 101us; 103us; 105us; 107us; 109us; 111us; 113us; 115us; 117us; 120us; 122us; 124us; 126us; 128us; 130us; 132us; 134us; 136us; 138us; 140us; 142us; 146us; 148us; 163us; 165us; 168us; 170us; 185us; 187us; 189us; 193us; 197us; 214us; 218us; 221us; 223us; 226us; 229us; 245us; 248us; 250us; 252us; 254us; 256us; 261us; 265us; 267us; 270us; 272us; 274us; 289us; 292us; 294us; 296us; 298us; 300us; 315us; 330us; 345us; 360us; 375us; 390us; 405us; 420us; 435us; 450us; 465us; 480us; 495us; 509us; 524us; 539us; 555us; 557us; 559us; 561us; 563us; 565us; 567us; 569us; 571us; 573us; 575us; 577us; 579us; 581us; 583us; 586us; 588us; 590us; 593us; 595us; 597us; 600us; 602us; 605us; 608us; 610us; 612us; 614us; 616us; 618us; 620us; 622us; 624us; 626us; 628us; 630us; 632us; |]
let _fsyacc_action_rows = 155
let _fsyacc_actionTableElements = [|5us; 16386us; 25us; 27us; 26us; 25us; 27us; 154us; 30us; 153us; 33us; 41us; 0us; 49152us; 1us; 32768us; 0us; 3us; 0us; 16385us; 5us; 16386us; 25us; 27us; 26us; 25us; 27us; 154us; 30us; 153us; 33us; 41us; 0us; 16387us; 1us; 32768us; 7us; 7us; 0us; 16388us; 0us; 16389us; 0us; 16390us; 0us; 16391us; 3us; 32768us; 1us; 18us; 22us; 16us; 36us; 14us; 3us; 32768us; 1us; 18us; 22us; 16us; 36us; 15us; 1us; 16392us; 5us; 21us; 0us; 16393us; 1us; 16393us; 1us; 49us; 3us; 32768us; 1us; 18us; 22us; 16us; 36us; 14us; 1us; 16394us; 5us; 21us; 3us; 32768us; 1us; 18us; 22us; 16us; 36us; 14us; 2us; 32768us; 2us; 20us; 5us; 21us; 0us; 16395us; 2us; 32768us; 6us; 22us; 37us; 23us; 0us; 16396us; 1us; 32768us; 6us; 24us; 0us; 16397us; 3us; 32768us; 27us; 154us; 30us; 153us; 33us; 29us; 0us; 16398us; 3us; 32768us; 27us; 154us; 30us; 153us; 33us; 41us; 0us; 16399us; 1us; 32768us; 36us; 30us; 1us; 32768us; 1us; 31us; 2us; 16404us; 27us; 154us; 30us; 153us; 1us; 32768us; 2us; 33us; 1us; 32768us; 7us; 34us; 0us; 16400us; 1us; 32768us; 36us; 36us; 1us; 32768us; 1us; 37us; 2us; 16404us; 27us; 154us; 30us; 153us; 1us; 32768us; 2us; 39us; 1us; 32768us; 7us; 40us; 0us; 16401us; 1us; 32768us; 36us; 42us; 1us; 32768us; 1us; 43us; 2us; 16404us; 27us; 154us; 30us; 153us; 1us; 32768us; 2us; 45us; 1us; 32768us; 3us; 57us; 0us; 16402us; 1us; 32768us; 36us; 48us; 1us; 32768us; 1us; 49us; 2us; 16404us; 27us; 154us; 30us; 153us; 1us; 32768us; 2us; 51us; 1us; 32768us; 3us; 57us; 0us; 16403us; 0us; 16405us; 1us; 16406us; 8us; 55us; 2us; 32768us; 27us; 154us; 30us; 153us; 0us; 16407us; 15us; 16409us; 1us; 132us; 3us; 57us; 10us; 134us; 11us; 100us; 21us; 150us; 22us; 140us; 27us; 154us; 29us; 75us; 30us; 153us; 31us; 152us; 32us; 70us; 34us; 81us; 36us; 96us; 37us; 148us; 38us; 149us; 1us; 32768us; 4us; 59us; 0us; 16408us; 15us; 16409us; 1us; 132us; 3us; 57us; 10us; 134us; 11us; 100us; 21us; 150us; 22us; 140us; 27us; 154us; 29us; 75us; 30us; 153us; 31us; 152us; 32us; 70us; 34us; 81us; 36us; 96us; 37us; 148us; 38us; 149us; 0us; 16410us; 1us; 32768us; 7us; 63us; 15us; 16409us; 1us; 132us; 3us; 57us; 10us; 134us; 11us; 100us; 21us; 150us; 22us; 140us; 27us; 154us; 29us; 75us; 30us; 153us; 31us; 152us; 32us; 70us; 34us; 81us; 36us; 96us; 37us; 148us; 38us; 149us; 0us; 16411us; 0us; 16412us; 1us; 16412us; 28us; 79us; 0us; 16413us; 14us; 32768us; 7us; 69us; 12us; 130us; 13us; 129us; 14us; 123us; 15us; 124us; 16us; 125us; 17us; 126us; 18us; 127us; 19us; 128us; 20us; 118us; 21us; 119us; 22us; 120us; 23us; 121us; 24us; 122us; 0us; 16414us; 10us; 32768us; 1us; 132us; 7us; 71us; 10us; 134us; 11us; 100us; 21us; 150us; 22us; 140us; 31us; 152us; 36us; 96us; 37us; 148us; 38us; 149us; 0us; 16415us; 14us; 32768us; 7us; 73us; 12us; 130us; 13us; 129us; 14us; 123us; 15us; 124us; 16us; 125us; 17us; 126us; 18us; 127us; 19us; 128us; 20us; 118us; 21us; 119us; 22us; 120us; 23us; 121us; 24us; 122us; 0us; 16416us; 0us; 16417us; 1us; 32768us; 1us; 76us; 9us; 32768us; 1us; 132us; 10us; 134us; 11us; 100us; 21us; 150us; 22us; 140us; 31us; 152us; 36us; 96us; 37us; 148us; 38us; 149us; 14us; 32768us; 2us; 78us; 12us; 130us; 13us; 129us; 14us; 123us; 15us; 124us; 16us; 125us; 17us; 126us; 18us; 127us; 19us; 128us; 20us; 118us; 21us; 119us; 22us; 120us; 23us; 121us; 24us; 122us; 13us; 32768us; 1us; 132us; 3us; 57us; 10us; 134us; 11us; 100us; 21us; 150us; 22us; 140us; 29us; 75us; 31us; 152us; 32us; 70us; 34us; 81us; 36us; 96us; 37us; 148us; 38us; 149us; 13us; 32768us; 1us; 132us; 3us; 57us; 10us; 134us; 11us; 100us; 21us; 150us; 22us; 140us; 29us; 75us; 31us; 152us; 32us; 70us; 34us; 81us; 36us; 96us; 37us; 148us; 38us; 149us; 0us; 16418us; 1us; 32768us; 1us; 82us; 9us; 32768us; 1us; 132us; 10us; 134us; 11us; 100us; 21us; 150us; 22us; 140us; 31us; 152us; 36us; 96us; 37us; 148us; 38us; 149us; 14us; 32768us; 2us; 84us; 12us; 130us; 13us; 129us; 14us; 123us; 15us; 124us; 16us; 125us; 17us; 126us; 18us; 127us; 19us; 128us; 20us; 118us; 21us; 119us; 22us; 120us; 23us; 121us; 24us; 122us; 13us; 32768us; 1us; 132us; 3us; 57us; 10us; 134us; 11us; 100us; 21us; 150us; 22us; 140us; 29us; 75us; 31us; 152us; 32us; 70us; 34us; 81us; 36us; 96us; 37us; 148us; 38us; 149us; 0us; 16419us; 0us; 16420us; 0us; 16421us; 0us; 16422us; 3us; 16423us; 2us; 139us; 5us; 143us; 9us; 94us; 2us; 16423us; 5us; 143us; 9us; 94us; 0us; 16424us; 1us; 16424us; 2us; 133us; 0us; 16425us; 9us; 32768us; 1us; 132us; 10us; 134us; 11us; 100us; 21us; 150us; 22us; 140us; 31us; 152us; 36us; 96us; 37us; 148us; 38us; 149us; 13us; 16426us; 12us; 130us; 13us; 129us; 14us; 123us; 15us; 124us; 16us; 125us; 17us; 126us; 18us; 127us; 19us; 128us; 20us; 118us; 21us; 119us; 22us; 120us; 23us; 121us; 24us; 122us; 1us; 16445us; 1us; 97us; 9us; 16450us; 1us; 132us; 10us; 134us; 11us; 100us; 21us; 150us; 22us; 140us; 31us; 152us; 36us; 96us; 37us; 148us; 38us; 149us; 1us; 32768us; 2us; 99us; 0us; 16427us; 9us; 32768us; 1us; 132us; 10us; 134us; 11us; 100us; 21us; 150us; 22us; 140us; 31us; 152us; 36us; 96us; 37us; 148us; 38us; 149us; 0us; 16428us; 3us; 16429us; 22us; 120us; 23us; 121us; 24us; 122us; 3us; 16430us; 22us; 120us; 23us; 121us; 24us; 122us; 0us; 16431us; 0us; 16432us; 0us; 16433us; 9us; 16434us; 16us; 125us; 17us; 126us; 18us; 127us; 19us; 128us; 20us; 118us; 21us; 119us; 22us; 120us; 23us; 121us; 24us; 122us; 9us; 16435us; 16us; 125us; 17us; 126us; 18us; 127us; 19us; 128us; 20us; 118us; 21us; 119us; 22us; 120us; 23us; 121us; 24us; 122us; 9us; 16436us; 16us; 125us; 17us; 126us; 18us; 127us; 19us; 128us; 20us; 118us; 21us; 119us; 22us; 120us; 23us; 121us; 24us; 122us; 9us; 16437us; 16us; 125us; 17us; 126us; 18us; 127us; 19us; 128us; 20us; 118us; 21us; 119us; 22us; 120us; 23us; 121us; 24us; 122us; 9us; 16438us; 16us; 125us; 17us; 126us; 18us; 127us; 19us; 128us; 20us; 118us; 21us; 119us; 22us; 120us; 23us; 121us; 24us; 122us; 9us; 16439us; 16us; 125us; 17us; 126us; 18us; 127us; 19us; 128us; 20us; 118us; 21us; 119us; 22us; 120us; 23us; 121us; 24us; 122us; 11us; 16440us; 14us; 123us; 15us; 124us; 16us; 125us; 17us; 126us; 18us; 127us; 19us; 128us; 20us; 118us; 21us; 119us; 22us; 120us; 23us; 121us; 24us; 122us; 13us; 32768us; 12us; 130us; 13us; 129us; 14us; 123us; 15us; 124us; 16us; 125us; 17us; 126us; 18us; 127us; 19us; 128us; 20us; 118us; 21us; 119us; 22us; 120us; 23us; 121us; 24us; 122us; 12us; 16441us; 13us; 129us; 14us; 123us; 15us; 124us; 16us; 125us; 17us; 126us; 18us; 127us; 19us; 128us; 20us; 118us; 21us; 119us; 22us; 120us; 23us; 121us; 24us; 122us; 14us; 32768us; 6us; 144us; 12us; 130us; 13us; 129us; 14us; 123us; 15us; 124us; 16us; 125us; 17us; 126us; 18us; 127us; 19us; 128us; 20us; 118us; 21us; 119us; 22us; 120us; 23us; 121us; 24us; 122us; 14us; 16452us; 8us; 146us; 12us; 130us; 13us; 129us; 14us; 123us; 15us; 124us; 16us; 125us; 17us; 126us; 18us; 127us; 19us; 128us; 20us; 118us; 21us; 119us; 22us; 120us; 23us; 121us; 24us; 122us; 9us; 32768us; 1us; 132us; 10us; 134us; 11us; 100us; 21us; 150us; 22us; 140us; 31us; 152us; 36us; 96us; 37us; 148us; 38us; 149us; 9us; 32768us; 1us; 132us; 10us; 134us; 11us; 100us; 21us; 150us; 22us; 140us; 31us; 152us; 36us; 96us; 37us; 148us; 38us; 149us; 9us; 32768us; 1us; 132us; 10us; 134us; 11us; 100us; 21us; 150us; 22us; 140us; 31us; 152us; 36us; 96us; 37us; 148us; 38us; 149us; 9us; 32768us; 1us; 132us; 10us; 134us; 11us; 100us; 21us; 150us; 22us; 140us; 31us; 152us; 36us; 96us; 37us; 148us; 38us; 149us; 9us; 32768us; 1us; 132us; 10us; 134us; 11us; 100us; 21us; 150us; 22us; 140us; 31us; 152us; 36us; 96us; 37us; 148us; 38us; 149us; 9us; 32768us; 1us; 132us; 10us; 134us; 11us; 100us; 21us; 150us; 22us; 140us; 31us; 152us; 36us; 96us; 37us; 148us; 38us; 149us; 9us; 32768us; 1us; 132us; 10us; 134us; 11us; 100us; 21us; 150us; 22us; 140us; 31us; 152us; 36us; 96us; 37us; 148us; 38us; 149us; 9us; 32768us; 1us; 132us; 10us; 134us; 11us; 100us; 21us; 150us; 22us; 140us; 31us; 152us; 36us; 96us; 37us; 148us; 38us; 149us; 9us; 32768us; 1us; 132us; 10us; 134us; 11us; 100us; 21us; 150us; 22us; 140us; 31us; 152us; 36us; 96us; 37us; 148us; 38us; 149us; 9us; 32768us; 1us; 132us; 10us; 134us; 11us; 100us; 21us; 150us; 22us; 140us; 31us; 152us; 36us; 96us; 37us; 148us; 38us; 149us; 9us; 32768us; 1us; 132us; 10us; 134us; 11us; 100us; 21us; 150us; 22us; 140us; 31us; 152us; 36us; 96us; 37us; 148us; 38us; 149us; 9us; 32768us; 1us; 132us; 10us; 134us; 11us; 100us; 21us; 150us; 22us; 140us; 31us; 152us; 36us; 96us; 37us; 148us; 38us; 149us; 9us; 32768us; 1us; 132us; 10us; 134us; 11us; 100us; 21us; 150us; 22us; 140us; 31us; 152us; 36us; 96us; 37us; 148us; 38us; 149us; 0us; 16442us; 9us; 32768us; 1us; 132us; 10us; 134us; 11us; 100us; 21us; 150us; 22us; 140us; 31us; 152us; 36us; 96us; 37us; 148us; 38us; 149us; 0us; 16443us; 3us; 32768us; 1us; 137us; 22us; 140us; 36us; 136us; 1us; 16444us; 5us; 143us; 0us; 16445us; 3us; 32768us; 1us; 137us; 22us; 140us; 36us; 136us; 2us; 32768us; 2us; 139us; 5us; 143us; 0us; 16446us; 8us; 32768us; 1us; 132us; 10us; 134us; 21us; 150us; 22us; 140us; 31us; 152us; 36us; 136us; 37us; 148us; 38us; 149us; 1us; 16447us; 5us; 143us; 0us; 16448us; 9us; 32768us; 1us; 132us; 10us; 134us; 11us; 100us; 21us; 150us; 22us; 140us; 31us; 152us; 36us; 96us; 37us; 148us; 38us; 149us; 0us; 16449us; 0us; 16451us; 9us; 32768us; 1us; 132us; 10us; 134us; 11us; 100us; 21us; 150us; 22us; 140us; 31us; 152us; 36us; 96us; 37us; 148us; 38us; 149us; 0us; 16453us; 0us; 16454us; 0us; 16455us; 1us; 32768us; 37us; 151us; 0us; 16456us; 0us; 16457us; 0us; 16458us; 0us; 16459us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 6us; 7us; 9us; 10us; 16us; 17us; 19us; 20us; 21us; 22us; 23us; 27us; 31us; 33us; 34us; 36us; 40us; 42us; 46us; 49us; 50us; 53us; 54us; 56us; 57us; 61us; 62us; 66us; 67us; 69us; 71us; 74us; 76us; 78us; 79us; 81us; 83us; 86us; 88us; 90us; 91us; 93us; 95us; 98us; 100us; 102us; 103us; 105us; 107us; 110us; 112us; 114us; 115us; 116us; 118us; 121us; 122us; 138us; 140us; 141us; 157us; 158us; 160us; 176us; 177us; 178us; 180us; 181us; 196us; 197us; 208us; 209us; 224us; 225us; 226us; 228us; 238us; 253us; 267us; 281us; 282us; 284us; 294us; 309us; 323us; 324us; 325us; 326us; 327us; 331us; 334us; 335us; 337us; 338us; 348us; 362us; 364us; 374us; 376us; 377us; 387us; 388us; 392us; 396us; 397us; 398us; 399us; 409us; 419us; 429us; 439us; 449us; 459us; 471us; 485us; 498us; 513us; 528us; 538us; 548us; 558us; 568us; 578us; 588us; 598us; 608us; 618us; 628us; 638us; 648us; 658us; 659us; 669us; 670us; 674us; 676us; 677us; 681us; 684us; 685us; 694us; 696us; 697us; 707us; 708us; 709us; 719us; 720us; 721us; 722us; 724us; 725us; 726us; 727us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 0us; 2us; 2us; 1us; 1us; 1us; 2us; 1us; 2us; 3us; 3us; 4us; 2us; 2us; 6us; 6us; 6us; 6us; 0us; 1us; 1us; 3us; 3us; 0us; 2us; 3us; 1us; 1us; 2us; 2us; 3us; 1us; 7us; 5us; 7us; 5us; 5us; 1us; 1us; 1us; 3us; 4us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; 3us; 2us; 1us; 3us; 2us; 2us; 4us; 0us; 1us; 1us; 3us; 1us; 1us; 2us; 1us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 3us; 3us; 4us; 5us; 5us; 5us; 5us; 5us; 6us; 7us; 8us; 8us; 9us; 9us; 10us; 10us; 11us; 11us; 12us; 13us; 13us; 13us; 14us; 14us; 15us; 15us; 15us; 15us; 15us; 15us; 16us; 16us; 16us; 17us; 17us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 19us; 19us; 19us; 20us; 20us; 20us; 20us; 20us; 21us; 21us; 22us; 22us; 23us; 23us; 23us; 23us; 24us; 24us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 16387us; 65535us; 16388us; 16389us; 16390us; 16391us; 65535us; 65535us; 65535us; 16393us; 65535us; 65535us; 65535us; 65535us; 65535us; 16395us; 65535us; 16396us; 65535us; 16397us; 65535us; 16398us; 65535us; 16399us; 65535us; 65535us; 65535us; 65535us; 65535us; 16400us; 65535us; 65535us; 65535us; 65535us; 65535us; 16401us; 65535us; 65535us; 65535us; 65535us; 65535us; 16402us; 65535us; 65535us; 65535us; 65535us; 65535us; 16403us; 16405us; 65535us; 65535us; 16407us; 65535us; 65535us; 16408us; 65535us; 16410us; 65535us; 65535us; 16411us; 16412us; 65535us; 16413us; 65535us; 16414us; 65535us; 16415us; 65535us; 16416us; 16417us; 65535us; 65535us; 65535us; 65535us; 65535us; 16418us; 65535us; 65535us; 65535us; 65535us; 16419us; 16420us; 16421us; 16422us; 65535us; 65535us; 16424us; 65535us; 16425us; 65535us; 65535us; 65535us; 65535us; 65535us; 16427us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16442us; 65535us; 16443us; 65535us; 65535us; 16445us; 65535us; 65535us; 16446us; 65535us; 65535us; 16448us; 65535us; 16449us; 16451us; 65535us; 16453us; 16454us; 16455us; 65535us; 16456us; 16457us; 16458us; 16459us; |]
let _fsyacc_reductions ()  =    [| 
# 409 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : MicroWac.Absyn.Program)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startMain));
# 418 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Topdecs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "..\..\CPar.fsy"
                                                               Prog _1 
                   )
# 49 "..\..\CPar.fsy"
                 : MicroWac.Absyn.Program));
# 429 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "..\..\CPar.fsy"
                                                               [] 
                   )
# 53 "..\..\CPar.fsy"
                 : 'Topdecs));
# 439 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Topdec)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Topdecs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "..\..\CPar.fsy"
                                                               _1 :: _2 
                   )
# 54 "..\..\CPar.fsy"
                 : 'Topdecs));
# 451 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "..\..\CPar.fsy"
                                                               Vardec (fst _1, snd _1) 
                   )
# 58 "..\..\CPar.fsy"
                 : 'Topdec));
# 462 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ImportedFunsig)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "..\..\CPar.fsy"
                                                               _1 
                   )
# 59 "..\..\CPar.fsy"
                 : 'Topdec));
# 473 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExportedFundec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "..\..\CPar.fsy"
                                                               _1 
                   )
# 60 "..\..\CPar.fsy"
                 : 'Topdec));
# 484 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Fundec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "..\..\CPar.fsy"
                                                               _1 
                   )
# 61 "..\..\CPar.fsy"
                 : 'Topdec));
# 495 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardesc)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "..\..\CPar.fsy"
                                                               ((fst _2) _1, snd _2) 
                   )
# 65 "..\..\CPar.fsy"
                 : 'Vardec));
# 507 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "..\..\CPar.fsy"
                                                               ((fun t -> t), _1)                      
                   )
# 69 "..\..\CPar.fsy"
                 : 'Vardesc));
# 518 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardesc)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "..\..\CPar.fsy"
                                                               compose1 TypP _2                        
                   )
# 70 "..\..\CPar.fsy"
                 : 'Vardesc));
# 529 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardesc)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "..\..\CPar.fsy"
                                                               _2                                      
                   )
# 71 "..\..\CPar.fsy"
                 : 'Vardesc));
# 540 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardesc)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "..\..\CPar.fsy"
                                                               compose1 (fun t -> TypA(t, None)) _1    
                   )
# 72 "..\..\CPar.fsy"
                 : 'Vardesc));
# 551 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardesc)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "..\..\CPar.fsy"
                                                               compose1 (fun t -> TypA(t, Some _3)) _1 
                   )
# 73 "..\..\CPar.fsy"
                 : 'Vardesc));
# 563 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Funsig)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "..\..\CPar.fsy"
                                                               importFunsig _2 
                   )
# 77 "..\..\CPar.fsy"
                 : 'ImportedFunsig));
# 574 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Fundec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "..\..\CPar.fsy"
                                                               exportFundec _2 
                   )
# 81 "..\..\CPar.fsy"
                 : 'ExportedFundec));
# 585 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Paramdecs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "..\..\CPar.fsy"
                                                               Funsig(false, None,    _2, _4) 
                   )
# 85 "..\..\CPar.fsy"
                 : 'Funsig));
# 597 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Paramdecs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "..\..\CPar.fsy"
                                                               Funsig(false, Some _1, _2, _4) 
                   )
# 86 "..\..\CPar.fsy"
                 : 'Funsig));
# 610 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Paramdecs)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "..\..\CPar.fsy"
                                                               Fundec(false, None,    _2, _4, _6) 
                   )
# 90 "..\..\CPar.fsy"
                 : 'Fundec));
# 623 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Paramdecs)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "..\..\CPar.fsy"
                                                               Fundec(false, Some _1, _2, _4, _6) 
                   )
# 91 "..\..\CPar.fsy"
                 : 'Fundec));
# 637 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "..\..\CPar.fsy"
                                                               [] 
                   )
# 96 "..\..\CPar.fsy"
                 : 'Paramdecs));
# 647 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Paramdecs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "..\..\CPar.fsy"
                                                               _1 
                   )
# 97 "..\..\CPar.fsy"
                 : 'Paramdecs));
# 658 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "..\..\CPar.fsy"
                                                               [_1]     
                   )
# 101 "..\..\CPar.fsy"
                 : 'Paramdecs1));
# 669 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardec)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Paramdecs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "..\..\CPar.fsy"
                                                               _1 :: _3 
                   )
# 102 "..\..\CPar.fsy"
                 : 'Paramdecs1));
# 681 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtOrDecSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "..\..\CPar.fsy"
                                                               Block _2 
                   )
# 106 "..\..\CPar.fsy"
                 : 'Block));
# 692 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "..\..\CPar.fsy"
                                                               [] 
                   )
# 110 "..\..\CPar.fsy"
                 : 'StmtOrDecSeq));
# 702 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtOrDecSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "..\..\CPar.fsy"
                                                               Stmt _1 :: _2 
                   )
# 111 "..\..\CPar.fsy"
                 : 'StmtOrDecSeq));
# 714 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Vardec)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtOrDecSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "..\..\CPar.fsy"
                                                               Dec (fst _1, snd _1) :: _3 
                   )
# 112 "..\..\CPar.fsy"
                 : 'StmtOrDecSeq));
# 726 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "..\..\CPar.fsy"
                                                               _1 
                   )
# 116 "..\..\CPar.fsy"
                 : 'Stmt));
# 737 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtU)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "..\..\CPar.fsy"
                                                               _1 
                   )
# 117 "..\..\CPar.fsy"
                 : 'Stmt));
# 748 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "..\..\CPar.fsy"
                                                               Expr(_1)             
                   )
# 121 "..\..\CPar.fsy"
                 : 'StmtM));
# 759 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "..\..\CPar.fsy"
                                                               Return None          
                   )
# 122 "..\..\CPar.fsy"
                 : 'StmtM));
# 769 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "..\..\CPar.fsy"
                                                               Return(Some(_2))     
                   )
# 123 "..\..\CPar.fsy"
                 : 'StmtM));
# 780 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Block)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "..\..\CPar.fsy"
                                                               _1                   
                   )
# 124 "..\..\CPar.fsy"
                 : 'StmtM));
# 791 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "..\..\CPar.fsy"
                                                               If(_3, _5, _7)       
                   )
# 125 "..\..\CPar.fsy"
                 : 'StmtM));
# 804 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "..\..\CPar.fsy"
                                                               While(_3, _5)        
                   )
# 126 "..\..\CPar.fsy"
                 : 'StmtM));
# 816 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtM)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtU)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "..\..\CPar.fsy"
                                                               If(_3, _5, _7)       
                   )
# 130 "..\..\CPar.fsy"
                 : 'StmtU));
# 829 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "..\..\CPar.fsy"
                                                               If(_3, _5, Block []) 
                   )
# 131 "..\..\CPar.fsy"
                 : 'StmtU));
# 841 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'StmtU)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "..\..\CPar.fsy"
                                                               While(_3, _5)        
                   )
# 132 "..\..\CPar.fsy"
                 : 'StmtU));
# 853 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "..\..\CPar.fsy"
                                                               Access _1           
                   )
# 136 "..\..\CPar.fsy"
                 : 'Expr));
# 864 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "..\..\CPar.fsy"
                                                               _1                  
                   )
# 137 "..\..\CPar.fsy"
                 : 'Expr));
# 875 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'AtExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "..\..\CPar.fsy"
                                                               _1                  
                   )
# 141 "..\..\CPar.fsy"
                 : 'ExprNotAccess));
# 886 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 "..\..\CPar.fsy"
                                                               Assign(_1, _3)      
                   )
# 142 "..\..\CPar.fsy"
                 : 'ExprNotAccess));
# 898 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exprs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "..\..\CPar.fsy"
                                                               Call(_1, _3)        
                   )
# 143 "..\..\CPar.fsy"
                 : 'ExprNotAccess));
# 910 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "..\..\CPar.fsy"
                                                               Prim1("!", _2)      
                   )
# 144 "..\..\CPar.fsy"
                 : 'ExprNotAccess));
# 921 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "..\..\CPar.fsy"
                                                               Prim2("+",  _1, _3) 
                   )
# 145 "..\..\CPar.fsy"
                 : 'ExprNotAccess));
# 933 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 146 "..\..\CPar.fsy"
                                                               Prim2("-",  _1, _3) 
                   )
# 146 "..\..\CPar.fsy"
                 : 'ExprNotAccess));
# 945 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 147 "..\..\CPar.fsy"
                                                               Prim2("*",  _1, _3) 
                   )
# 147 "..\..\CPar.fsy"
                 : 'ExprNotAccess));
# 957 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 148 "..\..\CPar.fsy"
                                                               Prim2("/",  _1, _3) 
                   )
# 148 "..\..\CPar.fsy"
                 : 'ExprNotAccess));
# 969 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 149 "..\..\CPar.fsy"
                                                               Prim2("%",  _1, _3) 
                   )
# 149 "..\..\CPar.fsy"
                 : 'ExprNotAccess));
# 981 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 "..\..\CPar.fsy"
                                                               Prim2("==", _1, _3) 
                   )
# 150 "..\..\CPar.fsy"
                 : 'ExprNotAccess));
# 993 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 151 "..\..\CPar.fsy"
                                                               Prim2("!=", _1, _3) 
                   )
# 151 "..\..\CPar.fsy"
                 : 'ExprNotAccess));
# 1005 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 152 "..\..\CPar.fsy"
                                                               Prim2(">",  _1, _3) 
                   )
# 152 "..\..\CPar.fsy"
                 : 'ExprNotAccess));
# 1017 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 153 "..\..\CPar.fsy"
                                                               Prim2("<",  _1, _3) 
                   )
# 153 "..\..\CPar.fsy"
                 : 'ExprNotAccess));
# 1029 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 154 "..\..\CPar.fsy"
                                                               Prim2(">=", _1, _3) 
                   )
# 154 "..\..\CPar.fsy"
                 : 'ExprNotAccess));
# 1041 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "..\..\CPar.fsy"
                                                               Prim2("<=", _1, _3) 
                   )
# 155 "..\..\CPar.fsy"
                 : 'ExprNotAccess));
# 1053 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 156 "..\..\CPar.fsy"
                                                               Andalso(_1, _3)     
                   )
# 156 "..\..\CPar.fsy"
                 : 'ExprNotAccess));
# 1065 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 157 "..\..\CPar.fsy"
                                                               Orelse(_1, _3)      
                   )
# 157 "..\..\CPar.fsy"
                 : 'ExprNotAccess));
# 1077 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Const)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 161 "..\..\CPar.fsy"
                                                               CstI _1             
                   )
# 161 "..\..\CPar.fsy"
                 : 'AtExprNotAccess));
# 1088 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 162 "..\..\CPar.fsy"
                                                               _2                  
                   )
# 162 "..\..\CPar.fsy"
                 : 'AtExprNotAccess));
# 1099 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 163 "..\..\CPar.fsy"
                                                               Addr _2             
                   )
# 163 "..\..\CPar.fsy"
                 : 'AtExprNotAccess));
# 1110 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 167 "..\..\CPar.fsy"
                                                               AccVar _1           
                   )
# 167 "..\..\CPar.fsy"
                 : 'Access));
# 1121 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 168 "..\..\CPar.fsy"
                                                               _2                  
                   )
# 168 "..\..\CPar.fsy"
                 : 'Access));
# 1132 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 169 "..\..\CPar.fsy"
                                                               AccDeref (Access _2)
                   )
# 169 "..\..\CPar.fsy"
                 : 'Access));
# 1143 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'AtExprNotAccess)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 170 "..\..\CPar.fsy"
                                                               AccDeref _2         
                   )
# 170 "..\..\CPar.fsy"
                 : 'Access));
# 1154 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Access)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 171 "..\..\CPar.fsy"
                                                               AccIndex(_1, _3)    
                   )
# 171 "..\..\CPar.fsy"
                 : 'Access));
# 1166 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 175 "..\..\CPar.fsy"
                                                               []       
                   )
# 175 "..\..\CPar.fsy"
                 : 'Exprs));
# 1176 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exprs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 176 "..\..\CPar.fsy"
                                                               _1       
                   )
# 176 "..\..\CPar.fsy"
                 : 'Exprs));
# 1187 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 180 "..\..\CPar.fsy"
                                                               [_1]     
                   )
# 180 "..\..\CPar.fsy"
                 : 'Exprs1));
# 1198 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Exprs1)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 181 "..\..\CPar.fsy"
                                                               _1 :: _3 
                   )
# 181 "..\..\CPar.fsy"
                 : 'Exprs1));
# 1210 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 185 "..\..\CPar.fsy"
                                                               _1       
                   )
# 185 "..\..\CPar.fsy"
                 : 'Const));
# 1221 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 186 "..\..\CPar.fsy"
                                                               _1       
                   )
# 186 "..\..\CPar.fsy"
                 : 'Const));
# 1232 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 187 "..\..\CPar.fsy"
                                                               - _2     
                   )
# 187 "..\..\CPar.fsy"
                 : 'Const));
# 1243 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 188 "..\..\CPar.fsy"
                                                               -1       
                   )
# 188 "..\..\CPar.fsy"
                 : 'Const));
# 1253 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 192 "..\..\CPar.fsy"
                                                               TypI     
                   )
# 192 "..\..\CPar.fsy"
                 : 'Type));
# 1263 "..\..\CPar.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 193 "..\..\CPar.fsy"
                                                               TypC     
                   )
# 193 "..\..\CPar.fsy"
                 : 'Type));
|]
# 1274 "..\..\CPar.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 42;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let Main lexer lexbuf : MicroWac.Absyn.Program =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
